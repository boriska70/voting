#!/usr/bin/env node

/**
 * Module dependencies.
 */

var log4js = require('log4js');
log4js.replaceConsole();
if (process.env.LOG_LEVEL) {
    log4js.setGlobalLogLevel(process.env.LOG_LEVEL);
} else {
    log4js.setGlobalLogLevel(log4js.levels.DEBUG);
}
var logger = log4js.getLogger('www.js');

var app = require('../app');
var debug = require('debug')('Vote:server');
var http = require('http');
var Q = require('q');
var es = require('../controllers/elasticsearch-controller');
var config = require('../helpers/config');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

es.setESParams();
es.watchES();

var interv = setInterval(function () {
    if(es.isEsReady()){
        console.log('ES IS READY, starting server');
        startServer();
    } else {
        console.log('ES IS NOT READY, still waiting');
    }
}, 1000);

function startServer() {
    clearInterval(interv);
    config.setChoices(function () {
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Server is running on ' + bind);
    es.watchES();
}
